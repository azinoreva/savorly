// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'meal.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1881870326788372255),
      name: 'Ingredient',
      lastPropertyId: const obx_int.IdUid(3, 8941660027191120391),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 908066957328339133),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3687220775271418096),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8941660027191120391),
            name: 'quantity',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 6794784933150230372),
            name: 'meals',
            targetId: const obx_int.IdUid(2, 2650348659210546063))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2650348659210546063),
      name: 'Meal',
      lastPropertyId: const obx_int.IdUid(7, 2769855897467571440),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 314928986065297804),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3525601501839378941),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7149589744664449938),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5178370810884053064),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2296717094035326456),
            name: 'videoUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3105791472649262579),
            name: 'mealType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2769855897467571440),
            name: 'validatedMealType',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 1742618606704457679),
            name: 'preparationSteps',
            targetId: const obx_int.IdUid(4, 5404674523021644846))
      ],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'ingredients', srcEntity: 'Ingredient', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2473740120456123453),
      name: 'MealPlan',
      lastPropertyId: const obx_int.IdUid(4, 7282952469903224498),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5399871741228713578),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3284851822820914795),
            name: 'day',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7282505448907977954),
            name: 'mealType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7282952469903224498),
            name: 'mealName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 5404674523021644846),
      name: 'PreparationStep',
      lastPropertyId: const obx_int.IdUid(3, 1812028686187133569),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6537908786284618959),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5527052869719243596),
            name: 'stepNumber',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1812028686187133569),
            name: 'instruction',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 5404674523021644846),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(2, 1742618606704457679),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Ingredient: obx_int.EntityDefinition<Ingredient>(
        model: _entities[0],
        toOneRelations: (Ingredient object) => [],
        toManyRelations: (Ingredient object) =>
            {obx_int.RelInfo<Ingredient>.toMany(1, object.id): object.meals},
        getId: (Ingredient object) => object.id,
        setId: (Ingredient object, int id) {
          object.id = id;
        },
        objectToFB: (Ingredient object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.quantity);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final quantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object =
              Ingredient(id: idParam, name: nameParam, quantity: quantityParam);
          obx_int.InternalToManyAccess.setRelInfo<Ingredient>(object.meals,
              store, obx_int.RelInfo<Ingredient>.toMany(1, object.id));
          return object;
        }),
    Meal: obx_int.EntityDefinition<Meal>(
        model: _entities[1],
        toOneRelations: (Meal object) => [],
        toManyRelations: (Meal object) => {
              obx_int.RelInfo<Meal>.toMany(2, object.id):
                  object.preparationSteps,
              obx_int.RelInfo<Ingredient>.toManyBacklink(1, object.id):
                  object.ingredients
            },
        getId: (Meal object) => object.id,
        setId: (Meal object, int id) {
          object.id = id;
        },
        objectToFB: (Meal object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final imageUrlOffset = fbb.writeString(object.imageUrl);
          final videoUrlOffset = fbb.writeString(object.videoUrl);
          final mealTypeOffset = fbb.writeString(object.mealType);
          final validatedMealTypeOffset =
              fbb.writeString(object.validatedMealType);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, imageUrlOffset);
          fbb.addOffset(4, videoUrlOffset);
          fbb.addOffset(5, mealTypeOffset);
          fbb.addOffset(6, validatedMealTypeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final mealTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final videoUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Meal(
              id: idParam,
              name: nameParam,
              description: descriptionParam,
              imageUrl: imageUrlParam,
              mealType: mealTypeParam,
              videoUrl: videoUrlParam)
            ..validatedMealType = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '');
          obx_int.InternalToManyAccess.setRelInfo<Meal>(object.preparationSteps,
              store, obx_int.RelInfo<Meal>.toMany(2, object.id));
          obx_int.InternalToManyAccess.setRelInfo<Meal>(object.ingredients,
              store, obx_int.RelInfo<Ingredient>.toManyBacklink(1, object.id));
          return object;
        }),
    MealPlan: obx_int.EntityDefinition<MealPlan>(
        model: _entities[2],
        toOneRelations: (MealPlan object) => [],
        toManyRelations: (MealPlan object) => {},
        getId: (MealPlan object) => object.id,
        setId: (MealPlan object, int id) {
          object.id = id;
        },
        objectToFB: (MealPlan object, fb.Builder fbb) {
          final dayOffset = fbb.writeString(object.day);
          final mealTypeOffset = fbb.writeString(object.mealType);
          final mealNameOffset = fbb.writeString(object.mealName);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dayOffset);
          fbb.addOffset(2, mealTypeOffset);
          fbb.addOffset(3, mealNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dayParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final mealTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final mealNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = MealPlan(
              day: dayParam, mealType: mealTypeParam, mealName: mealNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    PreparationStep: obx_int.EntityDefinition<PreparationStep>(
        model: _entities[3],
        toOneRelations: (PreparationStep object) => [],
        toManyRelations: (PreparationStep object) => {},
        getId: (PreparationStep object) => object.id,
        setId: (PreparationStep object, int id) {
          object.id = id;
        },
        objectToFB: (PreparationStep object, fb.Builder fbb) {
          final instructionOffset = fbb.writeString(object.instruction);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.stepNumber);
          fbb.addOffset(2, instructionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final stepNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final instructionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = PreparationStep(
              id: idParam,
              stepNumber: stepNumberParam,
              instruction: instructionParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Ingredient] entity fields to define ObjectBox queries.
class Ingredient_ {
  /// See [Ingredient.id].
  static final id =
      obx.QueryIntegerProperty<Ingredient>(_entities[0].properties[0]);

  /// See [Ingredient.name].
  static final name =
      obx.QueryStringProperty<Ingredient>(_entities[0].properties[1]);

  /// See [Ingredient.quantity].
  static final quantity =
      obx.QueryIntegerProperty<Ingredient>(_entities[0].properties[2]);

  /// see [Ingredient.meals]
  static final meals =
      obx.QueryRelationToMany<Ingredient, Meal>(_entities[0].relations[0]);
}

/// [Meal] entity fields to define ObjectBox queries.
class Meal_ {
  /// See [Meal.id].
  static final id = obx.QueryIntegerProperty<Meal>(_entities[1].properties[0]);

  /// See [Meal.name].
  static final name = obx.QueryStringProperty<Meal>(_entities[1].properties[1]);

  /// See [Meal.description].
  static final description =
      obx.QueryStringProperty<Meal>(_entities[1].properties[2]);

  /// See [Meal.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<Meal>(_entities[1].properties[3]);

  /// See [Meal.videoUrl].
  static final videoUrl =
      obx.QueryStringProperty<Meal>(_entities[1].properties[4]);

  /// See [Meal.mealType].
  static final mealType =
      obx.QueryStringProperty<Meal>(_entities[1].properties[5]);

  /// See [Meal.validatedMealType].
  static final validatedMealType =
      obx.QueryStringProperty<Meal>(_entities[1].properties[6]);

  /// see [Meal.preparationSteps]
  static final preparationSteps =
      obx.QueryRelationToMany<Meal, PreparationStep>(_entities[1].relations[0]);
}

/// [MealPlan] entity fields to define ObjectBox queries.
class MealPlan_ {
  /// See [MealPlan.id].
  static final id =
      obx.QueryIntegerProperty<MealPlan>(_entities[2].properties[0]);

  /// See [MealPlan.day].
  static final day =
      obx.QueryStringProperty<MealPlan>(_entities[2].properties[1]);

  /// See [MealPlan.mealType].
  static final mealType =
      obx.QueryStringProperty<MealPlan>(_entities[2].properties[2]);

  /// See [MealPlan.mealName].
  static final mealName =
      obx.QueryStringProperty<MealPlan>(_entities[2].properties[3]);
}

/// [PreparationStep] entity fields to define ObjectBox queries.
class PreparationStep_ {
  /// See [PreparationStep.id].
  static final id =
      obx.QueryIntegerProperty<PreparationStep>(_entities[3].properties[0]);

  /// See [PreparationStep.stepNumber].
  static final stepNumber =
      obx.QueryIntegerProperty<PreparationStep>(_entities[3].properties[1]);

  /// See [PreparationStep.instruction].
  static final instruction =
      obx.QueryStringProperty<PreparationStep>(_entities[3].properties[2]);
}
